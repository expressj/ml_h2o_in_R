rf_grid_by_auc <- h2o.getGrid(grid_id, sort_by = "auc", decreasing = TRUE)
library(data.table, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(DT, quietly = TRUE)
library(h2o, quietly = TRUE)
creditcard_dt <- fread("creditcard.csv")
creditcard_dt[, Class := as.factor(Class)]
dim(creditcard_dt)
creditcard_dt$Class %>%
as.vector() %>%
table(dnn = "Class") %>%
as.data.frame(.) %>%
ggplot(data = ., aes(x = as.factor(Class), y = Freq)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(round(Freq/sum(Freq), 8) * 100, "%"))) +
xlab("Target : Class") + ylab("Frequency")
creditcard_g <- gather(creditcard_dt, key = "PCA_key", value = "value", -Time, -Amount, -Class)
creditcard_g <- gather(creditcard_dt, key = "PCA_key", value = "value", -Time, -Amount, -Class)
ggplot(creditcard_g, aes(x = value)) + geom_density(aes(colour = Class)) +
facet_wrap(~ PCA_key, nrow = 4, scales = "free")
creditcard_dt %>%
ggplot(aes(x = Amount)) +
geom_density(aes(colour = Class)) +
xlim(c(0, quantile(creditcard_dt$Amount, 0.99)))
h2o.init(nthreads = -1, max_mem_size = "32g")
import_file_cc <- h2o.importFile("creditcard.csv", destination_frame = "import_file_cc")
as_h2o_cc <- as.h2o(creditcard_dt, destination_frame = "as_h2o_cc")
head(as_h2o_cc)
head(h2o.getFrame("as_h2o_cc"))
![](img/nfolds_cv.png)
summary(cv_rf)
cv_rf <-
h2o.randomForest(
x = features,
y = target,
training_frame = h2o.getFrame("train_h2o"),
model_id = "cv_rf",
nfolds = 5,
keep_cross_validation_predictions = TRUE,
fold_assignment = "Modulo"
)
all_v <- names(as_h2o_cc) # 모든 변수 리스트
target <- "Class" # Target
except_v <- "Time" # 제외할 변수
features <- all_v[!all_v %in% c(target, except_v)] # Target과 제외할 변수를 뺀 나머지 변수들은 feature로 지정
split_h2o <- h2o.splitFrame(as_h2o_cc, ratios = 0.7, destination_frames = c("train_h2o", "test_h2o"), seed = 1234)
dim(h2o.getFrame("train_h2o"))
dim(h2o.getFrame("test_h2o"))
simple_rf <-
h2o.randomForest(
x = features,
y = target,
training_frame = h2o.getFrame("train_h2o"),
model_id = "simple_rf"
)
cv_rf <-
h2o.randomForest(
x = features,
y = target,
training_frame = h2o.getFrame("train_h2o"),
model_id = "cv_rf",
nfolds = 5,
keep_cross_validation_predictions = TRUE,
fold_assignment = "Modulo"
)
summary(cv_rf)
h2o.performance(cv_rf, newdata = h2o.getFrame("test_h2o"))
grid_id <- "rf_grid"
hyper_params <- list(
ntrees = c(50, 150, 300),
max_depth = c(18, 20, 22),
mtries = c(as.integer(seq(3, length(features), length.out = 4)))
)
as.integer(seq(3, length(features), length.out = 4)
as.integer(seq(3, length(features), length.out = 4))
as.integer(seq(3, length(features), length.out = 4))
grid_id <- "rf_grid"
hyper_params <- list(
ntrees = c(50, 150, 300),
max_depth = c(18, 20, 22),
mtries = as.integer(seq(3, length(features), length.out = 4))
)
search_criteria <- list(
strategy = "RandomDiscrete", max_models = 5
)
rf_grid <-
h2o.grid(
x = features,
y = target,
algorithm = "randomForest",
training_frame = h2o.getFrame("train_h2o"),
grid_id = grid_id,
hyper_params = hyper_params,
search_criteria = search_criteria,
nfolds = 5,
keep_cross_validation_predictions = TRUE,
fold_assignment = "Modulo"
)
summary(rf_grid)
rf_grid_by_auc <- h2o.getGrid(grid_id, sort_by = "auc", decreasing = TRUE)
summary(rf_grid_by_auc)
best_rf <- h2o.getModel(rf_grid_by_auc@model_ids[[1]])
summary(best_rf)
h2o.performance(best_rf, newdata = h2o.getFrame("test_h2o"))
rf_grid_by_auc
rf_grid_by_auc@model_ids
rf_grid_ensemble <- h2o.stackedEnsemble(
x = features,
y = target,
training_frame = h2o.getFrame("train_h2o"),
model_id = "rf_grid_ensemble",
base_models = rf_grid_by_auc@model_ids,
metalearner_algorithm = "gbm",
metalearner_nfolds = 5,
seed = 1234
)
summary(rf_grid_ensemble)
rf_grid_ensemble <- h2o.stackedEnsemble(
x = features,
y = target,
training_frame = h2o.getFrame("train_h2o"),
model_id = "rf_grid_ensemble",
base_models = rf_grid_by_auc@model_ids,
metalearner_algorithm = "rf",
metalearner_nfolds = 5,
seed = 1234
)
rf_grid_ensemble <- h2o.stackedEnsemble(
x = features,
y = target,
training_frame = h2o.getFrame("train_h2o"),
model_id = "rf_grid_ensemble",
base_models = rf_grid_by_auc@model_ids,
metalearner_algorithm = "drf",
metalearner_nfolds = 5,
seed = 1234
)
summary(rf_grid_ensemble)
h2o.performance(rf_grid_ensemble, newdata = h2o.getFrame("test_h2o"))
summary(simple_rf)
h2o.shutdown(F)
h2o.saveModel(object = best_rf, path = "./best_rf")
grid_id
rf_grid_by_auc <- h2o.getGrid(grid_id, sort_by = "auc", decreasing = TRUE)
library(data.table, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(DT, quietly = TRUE)
library(h2o, quietly = TRUE)
creditcard_dt <- fread("creditcard.csv")
creditcard_dt[, Class := as.factor(Class)]
dim(creditcard_dt)
h2o.init(nthreads = -1, max_mem_size = "32g")
rm(list = ls())
gc()
rf_grid_by_auc <- h2o.getGrid(grid_id, sort_by = "auc", decreasing = TRUE)
grid_id
grid_id <- "rf_grid"
grid_id <- "rf_grid"
grid_id
h2o.removeAll()
load_rf <- h2o.loadModel(path = "./best_rf")
list.files("./best_rf/")
normalizePath(list.files("./best_rf/"))
normalizePath(list.files("./best_rf/"))
load_rf <- h2o.loadModel(path = normalizePath(list.files("./best_rf/")))
paste0("./best_rf/", list.files("./best_rf/"))
load_rf <- h2o.loadModel(path = paste0("./best_rf/", list.files("./best_rf/")))
summary(load_rf)
h2o.removeAll()
h2o.shutdown(F)
h2o.init(nthreads = -1, max_mem_size = "32g")
h2o.shutdown(F)
h2o.init(nthreads = -1)
